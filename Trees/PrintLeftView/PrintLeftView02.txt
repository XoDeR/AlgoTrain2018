2. Recursive implementation using Hashing â€“
 

We can also solve this problem by using Hashing. The idea is to traverse the tree in preorder fashion and pass level information in function arguments. If the level is visited for the first time, then we insert the current node and level information into the map. Finally when all nodes are processed, we traverse the map and print the left view.

We can also traverse nodes in reverse pre-order fashion as shown below:

void leftView(Node* root, int level, auto& map)
{
    if (root == nullptr)
        return;
 
    // insert the current node and level information into the map
    map[level] = root->key;
 
    // recurse for right subtree before left subtree
    leftView(root->right, level + 1, map);
    leftView(root->left, level + 1, map);
}
 
The time complexity of above solution is O(n) and auxiliary space used by the program is O(nlog(n)).