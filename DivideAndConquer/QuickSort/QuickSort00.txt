Given an array of integers, sort it using quicksort algorithm.

 
Quicksort is an efficient in-place sorting algorithm, which usually performs about two to three times faster than merge sort and heapsort when implemented well. Quicksort is a comparison sort, meaning that it can sort items of any type for which a less-than relation is defined. In efficient implementations, it is usually not a stable sort.

Quicksort on average takes O(nlog(n)) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is very rare.

 

How Quicksort works?
Quicksort is a divide and conquer algorithm. Like all divide and conquer algorithms, it first divides a large array into two smaller sub-arrays and then recursively sort the sub-arrays. Basically, three steps are involved in whole process –

Pivot selection: Pick an element, called a pivot, from the array (usually the leftmost or the rightmost element of the partition).
 
Partitioning: Reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position.
 
Recurse: Recursively apply the above steps to the sub-array of elements with smaller values than pivot and separately to the sub-array of elements with greater values than pivot.
 
The base case of the recursion is arrays of size 1, which never need to be sorted.

Note that the pivot selection and partitioning steps can be done in several different ways and the choice of specific implementation schemes greatly affects the algorithm’s performance.